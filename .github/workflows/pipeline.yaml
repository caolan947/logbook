name: CI/CD pipeline

on:
  push:
    branches:
      - 'main'
      - '**'
  delete:
    branches:
      - '**'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  PIPELINE_TESTER_ACCESS_KEY_ID: ${{ secrets.PIPELINE_TEST_AWS_ACCESS_KEY_ID }}
  PIPELINE_TESTER_SECRET_ACCESS_KEY: ${{ secrets.PIPELINE_TEST_AWS_SECRET_ACCESS_KEY }}

  SAM_TEMPLATE: template.yaml

  TESTING_STACK_NAME: logbook-app-test
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::376949755107:role/aws-sam-cli-managed-dev-pipe-PipelineExecutionRole-16OZ73NM855ID
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::376949755107:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-1WGED6IENHL4
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket-uapdj48ac4s6
  TESTING_REGION: eu-west-1
  API_ENDPOINT: https://bu36a7o261.execute-api.eu-west-1.amazonaws.com/Prod/

  PROD_STACK_NAME: logbook-app-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::376949755107:role/aws-sam-cli-managed-prod-pip-PipelineExecutionRole-QUF9BARIM8GP
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::376949755107:role/aws-sam-cli-managed-prod-CloudFormationExecutionR-176F16MW0I3JM
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline-artifactsbucket-146ptawh45p6x

  PROD_REGION: eu-west-1

jobs:
  # test:
  #   name: Run unit tests
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.10'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r tests/unit/requirements.txt
  #     - name: Execute unit tests
  #       run: |
  #         python -m unittest discover -s tests.unit

  # delete:
  #   name: Delete resources
  #   if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Delete feature branch stack
  #       env:
  #         FEATURE_BRANCH_NAME: ${{ github.event.ref }}
  #       run: |
  #         sam delete \
  #           --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
  #           --region ${TESTING_REGION} \
  #           --no-prompts

  # build-and-deploy:
  #   name: Build and deploy resources
  #   if: startsWith(github.ref, 'refs/heads/feature')
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: feature-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to feature stack in the testing account
  #       shell: bash
  #       run: |
  #         sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  # build-and-package:
  #   name: Build and package artifacts
  #   if: github.ref == 'refs/heads/main'
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true

  #     - name: Build resources
  #       run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to testing artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --region ${TESTING_REGION} \
  #           --output-template-file packaged-testing.yaml

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: packaged-testing.yaml
  #         path: packaged-testing.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to production artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --region ${PROD_REGION} \
  #           --output-template-file packaged-prod.yaml

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: packaged-prod.yaml
  #         path: packaged-prod.yaml

  # deploy-testing:
  #   name: Deploy to testing environment
  #   if: github.ref == 'refs/heads/main'
  #   needs: [build-and-package]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: packaged-testing.yaml

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to testing account
  #       run: |
  #         sam deploy --stack-name ${TESTING_STACK_NAME} \
  #           --template packaged-testing.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
      
  #     - name: List resources in the testing account
  #       shell: bash
  #       run: |
  #         sam list resources --stack-name logbook-app-test --output table

  integration-test:
    name: Run integration tests
    #if: github.ref == 'refs/heads/main'
    #needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/integration/requirements.txt
      - name: Execute integration tests
        run: |
          python -m unittest discover -s tests.integration

  deploy-prod:
    name: Deploy to production environment
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}

      - name: List resources in the production account
        shell: bash
        run: |
          sam list resources --stack-name logbook-app-prod --output table
